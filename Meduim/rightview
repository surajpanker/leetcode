/*

Given a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.

Example:

Input: [1,2,3,null,5,null,4]
Output: [1, 3, 4]
Explanation:

   1            <---
 /   \
2     3         <---
 \     \
  5     4       
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
static int max1=INT_MIN;
class Solution {
   

    public: void rightSide(TreeNode* root,int l, vector<int> &v){
          
          if(root==NULL)
              return ;
           if(l>max1)
           {
               max1=l;
               v.push_back(root->val);
              }
        rightSide(root->right,l+1,v);
        rightSide(root->right,l+1,v);
        r
       }
public:
    vector<int> rightSideView(TreeNode* root) {
       vector<int> arr;
            if(root==NULL)
                return arr;
          else{
            
              rightSide(root,0,arr);
              return arr;
           }
    }
};
